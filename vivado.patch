diff --git a/accelerator/lib/functions.vhd b/accelerator/lib/functions.vhd
index b3e4dd1..53081a1 100644
--- a/accelerator/lib/functions.vhd
+++ b/accelerator/lib/functions.vhd
@@ -111,7 +111,7 @@ package body functions is
   function u (a : in std_logic) return unsigned is
     variable result         : unsigned(0 downto 0);
   begin
-    if a then
+    if a ='1' then
       result                := u("1");
     else
       result                := u("0");
@@ -145,7 +145,7 @@ package body functions is
     variable result         : natural := 0;
   begin
     for i in a'range loop
-      if a(i) then
+      if a(i)='1' then
         result              := result + 1;
       end if;
     end loop;
diff --git a/accelerator/rtl/control.vhd b/accelerator/rtl/control.vhd
index e8b97ef..73456a9 100644
--- a/accelerator/rtl/control.vhd
+++ b/accelerator/rtl/control.vhd
@@ -24,7 +24,7 @@ architecture logic of control is
 
 begin
 
-  comb : process(all)
+  comb : process(r,q,i,ci,co)
     variable v                  : control_int;
   begin
 
@@ -37,7 +37,7 @@ begin
 
 ----------------------------------------------------------------------------------------------------------------------- control commands
 
-    if  i.ha.val then
+    if  i.ha.val='1' then
       case i.ha.com is
         when PCC_RESET =>
           v.state               := reset;
@@ -61,14 +61,14 @@ begin
         v.o.ca.reset            := '0';
         v.o.ah.done             := '1';
       when wed =>
-        if i.dc.read.valid then
+        if i.dc.read.valid='1' then
           v.state               := go;
           wed_parse             (i.dc.read.data, v.wed);
           v.start               := '1';
         end if;
       when go =>
         v.start                 := '0';
-        if co.done then
+        if co.done  ='1' then
           write_byte            (v.o.cd.write, i.ha.ea, slv(x"01"));
           v.state               := done;
         else
@@ -76,7 +76,7 @@ begin
           v.o.cd.write          := co.write;
         end if;
       when done =>
-        if i.dc.write.valid then
+        if i.dc.write.valid='1' then
           v.state               := idle;
           v.o.ah.running        := '0';
           v.o.ah.done           := '1';
@@ -101,7 +101,7 @@ begin
   reg : process(i.clk, r.o.ca.reset)
   begin
     if rising_edge(i.clk) then
-      if r.o.ca.reset then
+      if r.o.ca.reset ='1' then
         control_reset(r);
       else
         r                       <= q;
diff --git a/accelerator/rtl/dma.vhd b/accelerator/rtl/dma.vhd
index cfab2a0..54a0184 100644
--- a/accelerator/rtl/dma.vhd
+++ b/accelerator/rtl/dma.vhd
@@ -24,7 +24,7 @@ architecture logic of dma is
 
 begin
 
-  comb : process(all)
+  comb : process(i,r,q)
     variable v                                          : dma_int;
   begin
 
@@ -46,7 +46,7 @@ begin
     v.rse.engine(r.rse.pull_engine).touch.count         := r.rse.engine(r.rse.pull_engine).touch.count + u(r.read and not(r.read_touch));
     v.wse.engine(r.wse.pull_engine).touch.count         := r.wse.engine(r.wse.pull_engine).touch.count + u(r.write and not(r.write_touch));
 
-    if i.b.rad(0) then
+    if i.b.rad(0)='1' then
       v.o.b.rdata                                       := re.wb.data(1023 downto 512);
     else
       v.o.b.rdata                                       := re.wb.data(511 downto 0);
@@ -54,16 +54,16 @@ begin
 
 ----------------------------------------------------------------------------------------------------------------------- select read/write
 
-    if l(r.rse.active_count > 0 and r.wse.active_count > 0 and v.read_credits > 0 and v.write_credits > 0) and v.rt.available and v.wt.available then
+    if (l(r.rse.active_count > 0 and r.wse.active_count > 0 and v.read_credits > 0 and v.write_credits > 0) and v.rt.available and v.wt.available) = '1' then
       v.read                                            := not(DMA_WRITE_PRIORITY);
       v.write                                           := DMA_WRITE_PRIORITY;
-    elsif v.rt.available and l(r.rse.active_count > 0 and v.read_credits > 0) then
+    elsif (v.rt.available and l(r.rse.active_count > 0 and v.read_credits > 0))='1' then
       v.read                                            := '1';
-    elsif v.wt.available and l(r.wse.active_count > 0 and v.write_credits > 0) then
+    elsif (v.wt.available and l(r.wse.active_count > 0 and v.write_credits > 0))='1' then
       v.write                                           := '1';
     end if;
 
-    if v.read then
+    if v.read='1' then
       v.o.c.tag                                         := "0" & r.rt.tag(DMA_TAG_WIDTH - 1 downto 0);
     else
       v.o.c.tag                                         := "1" & r.wt.tag(DMA_TAG_WIDTH - 1 downto 0);
@@ -78,7 +78,7 @@ begin
 ----------------------------------------------------------------------------------------------------------------------- move requests to stream engines
 
     for stream in 0 to DMA_READ_ENGINES - 1 loop
-      if not(re.rq(stream).empty) and r.rse.free(stream) then
+      if (not(re.rq(stream).empty) and r.rse.free(stream)) ='1' then
         v.rse.free(stream)                              := '0';
         v.rse.ready(stream)                             := '1';
         v.rse.engine(stream).hold                       := (others => '0');
@@ -90,7 +90,7 @@ begin
     end loop;
 
     for stream in 0 to DMA_WRITE_ENGINES - 1 loop
-      if not(re.wq(stream).empty) and r.wse.free(stream) then
+      if (not(re.wq(stream).empty) and r.wse.free(stream)) ='1' then
         v.wse.free(stream)                              := '0';
         v.wse.ready(stream)                             := '1';
         v.wse.engine(stream).hold                       := (others => '0');
@@ -104,7 +104,7 @@ begin
 ----------------------------------------------------------------------------------------------------------------------- select stream engine
 
     for stream in 0 to DMA_READ_ENGINES - 1 loop
-      if r.rse.ready(stream) and not(r.rse.free(stream)) then
+      if (r.rse.ready(stream) and not(r.rse.free(stream)))='1' then
         v.rse.pull_engine                               := stream;
       end if;
     end loop;
@@ -112,7 +112,7 @@ begin
     v.rse.pull_stream(v.rse.pull_engine)                := '1';
 
     for stream in 0 to DMA_WRITE_ENGINES - 1 loop
-      if r.wse.ready(stream) and not(r.wse.free(stream)) and not(re.wqb(stream).empty) then
+      if (r.wse.ready(stream) and not(r.wse.free(stream)) and not(re.wqb(stream).empty))='1' then
         v.wse.pull_engine                               := stream;
       end if;
     end loop;
@@ -123,9 +123,9 @@ begin
 
 ----------------------------------------------------------------------------------------------------------------------- generate commands
 
-    if v.read then
-      if DMA_READ_TOUCH and l(r.rse.engine(v.rse.pull_engine).touch.count = DMA_TOUCH_COUNT and r.rse.engine(v.rse.pull_engine).request.size + DMA_TOUCH_COUNT > PSL_PAGESIZE)
-        and not(r.rse.engine(v.rse.pull_engine).touch.touch)
+    if v.read='1' then
+      if (DMA_READ_TOUCH and l(r.rse.engine(v.rse.pull_engine).touch.count = DMA_TOUCH_COUNT and r.rse.engine(v.rse.pull_engine).request.size + DMA_TOUCH_COUNT > PSL_PAGESIZE)
+        and not(r.rse.engine(v.rse.pull_engine).touch.touch)) = '1'
       then
         v.o.c.com                                       := PCO_TOUCH_I;
         v.o.c.ea                                        := r.rse.engine(v.rse.pull_engine).touch.address;
@@ -151,9 +151,9 @@ begin
       end if;
     end if;
 
-    if v.write then
-      if DMA_WRITE_TOUCH and l(r.wse.engine(v.wse.pull_engine).touch.count = DMA_TOUCH_COUNT and r.wse.engine(v.wse.pull_engine).request.size + DMA_TOUCH_COUNT > PSL_PAGESIZE)
-        and not(r.wse.engine(v.wse.pull_engine).touch.touch)
+    if v.write ='1'then
+      if (DMA_WRITE_TOUCH and l(r.wse.engine(v.wse.pull_engine).touch.count = DMA_TOUCH_COUNT and r.wse.engine(v.wse.pull_engine).request.size + DMA_TOUCH_COUNT > PSL_PAGESIZE)
+        and not(r.wse.engine(v.wse.pull_engine).touch.touch)) ='1'
       then
         v.o.c.com                                       := PCO_TOUCH_I;
         v.o.c.ea                                        := r.wse.engine(v.wse.pull_engine).touch.address;
@@ -186,8 +186,8 @@ begin
     end loop;
 
     for stream in 0 to DMA_READ_ENGINES - 1 loop
-      if not(v.rse.pull_stream(stream)) then
-        if not(v.rse.free(stream)) and not(v.rse.ready(stream)) then
+      if (not(v.rse.pull_stream(stream)))='1' then
+        if (not(v.rse.free(stream)) and not(v.rse.ready(stream)))='1' then
           v.rse.engine(stream).hold                     := r.rse.engine(stream).hold + u(v.read and not(v.rse.free(stream)));
           if v.rse.engine(stream).hold >= v.rse.active_count - 1 then
             v.rse.ready(stream)                         := '1';
@@ -199,7 +199,7 @@ begin
 
     for stream in 0 to DMA_WRITE_ENGINES - 1 loop
       if stream /= v.wse.pull_engine then
-        if not(v.wse.free(stream)) and not(v.wse.ready(stream)) then
+        if (not(v.wse.free(stream)) and not(v.wse.ready(stream))) ='1' then
           v.wse.engine(stream).hold                     := r.wse.engine(stream).hold + u(v.write);
           if v.wse.engine(stream).hold >= v.wse.active_count - 1 then
             v.wse.ready(stream)                         := '1';
@@ -211,21 +211,19 @@ begin
 
 --------------------------------------------------------------------------------------------------------------------- handle responses
 
-    if i.r.valid and not(write) and
+    if (i.r.valid and not(write) and
       l((i.r.tag <  r.rb.pull_address(DMA_TAG_WIDTH - 1 downto 0) and r.rb.put_flip =  r.rb.pull_flip) or
-        (i.r.tag >= r.rb.pull_address(DMA_TAG_WIDTH - 1 downto 0) and r.rb.put_flip /= r.rb.pull_flip))
+        (i.r.tag >= r.rb.pull_address(DMA_TAG_WIDTH - 1 downto 0) and r.rb.put_flip /= r.rb.pull_flip)))='1'
     then
       v.rb.put_flip                                     := not r.rb.put_flip;
     end if;
-    if i.r.valid and write and
-      l((tag <  r.wb.pull_address(DMA_TAG_WIDTH - 1 downto 0) and r.wb.put_flip =  r.wb.pull_flip) or
-        (tag >= r.wb.pull_address(DMA_TAG_WIDTH - 1 downto 0) and r.wb.put_flip /= r.wb.pull_flip))
+    if (i.r.valid and write) = '1' and (l((tag <  r.wb.pull_address(DMA_TAG_WIDTH - 1 downto 0) and r.wb.put_flip =  r.wb.pull_flip) or (tag >= r.wb.pull_address(DMA_TAG_WIDTH - 1 downto 0) and r.wb.put_flip /= r.wb.pull_flip)))='1'
     then
       v.wb.put_flip                                     := not r.wb.put_flip;
     end if;
 
-    if i.r.valid then
-      if write then
+    if i.r.valid='1' then
+      if write='1' then
         v.wb.status(idx(tag))                           := v.wb.put_flip;
       else
         v.rb.status(idx(tag))                           := v.rb.put_flip;
@@ -384,7 +382,7 @@ begin
   reg : process(i.cr)
   begin
     if rising_edge(i.cr.clk) then
-      if i.cr.rst then
+      if i.cr.rst='1' then
         dma_reset(r);
       else
         r                                               <= q;
diff --git a/accelerator/rtl/fifo.vhd b/accelerator/rtl/fifo.vhd
index 59a555a..f95dc66 100644
--- a/accelerator/rtl/fifo.vhd
+++ b/accelerator/rtl/fifo.vhd
@@ -37,7 +37,7 @@ architecture logic of fifo is
 
 begin
 
-  comb : process(all)
+  comb : process(r,put,q,pull)
     variable v          : fifo_int;
   begin
 
@@ -69,7 +69,7 @@ begin
   reg : process(cr)
   begin
     if rising_edge(cr.clk) then
-      if cr.rst then
+      if cr.rst='1' then
         r.put_address   <= (others => '0');
         r.pull_address  <= (others => '0');
         r.empty         <= '1';
@@ -123,7 +123,7 @@ architecture logic of fifo_unsigned is
 
 begin
 
-  comb : process(all)
+  comb : process(r,q,put,pull)
     variable v          : fifo_int;
   begin
 
@@ -155,7 +155,7 @@ begin
   reg : process(cr)
   begin
     if rising_edge(cr.clk) then
-      if cr.rst then
+      if cr.rst ='1' then
         r.put_address   <= (others => '0');
         r.pull_address  <= (others => '0');
         r.empty         <= '1';
diff --git a/accelerator/rtl/frame.vhd b/accelerator/rtl/frame.vhd
index 6e73c35..dd9e3cb 100644
--- a/accelerator/rtl/frame.vhd
+++ b/accelerator/rtl/frame.vhd
@@ -73,11 +73,11 @@ begin
   reg : process(cr)
   begin
     if rising_edge(cr.clk) then
-      if cr.rst then
+      if cr.rst ='1' then
         rc    <= (others => '0');
       else
         -- debug counter
-        if ha.r.valid then
+        if ha.r.valid='1' then
           rc  <= rc + 1;
         end if;
       end if;
diff --git a/accelerator/rtl/mmio.vhd b/accelerator/rtl/mmio.vhd
index 2503d23..82078f0 100644
--- a/accelerator/rtl/mmio.vhd
+++ b/accelerator/rtl/mmio.vhd
@@ -19,7 +19,7 @@ architecture logic of mmio is
 
 begin
 
-  comb : process(all)
+  comb : process(r,q,i.ha.val, i.ha.cfg, i.ha.rnw)
     variable v          : mmio_int;
   begin
 
@@ -39,10 +39,10 @@ begin
 ----------------------------------------------------------------------------------------------------------------------- afu descriptor
 
     -- register offset x'0 : reg_prog_model and num_of_processes
-    if i.ha.ad(PSL_MMIO_ADDRESS_WIDTH - 1 downto 0) = 24x"0" then
+    if i.ha.ad(PSL_MMIO_ADDRESS_WIDTH - 1 downto 0) = x"000000" then
       v.cfg_data        := AFUD_0;
     -- register offset x'30' : per_process_psa_control
-    elsif i.ha.ad(PSL_MMIO_ADDRESS_WIDTH - 1 downto 0) = 24x"c" then
+    elsif i.ha.ad(PSL_MMIO_ADDRESS_WIDTH - 1 downto 0) = x"00000c" then
       v.cfg_data        := AFUD_30;
     else
       v.cfg_data        := (others => '0');
@@ -50,7 +50,7 @@ begin
 
 ----------------------------------------------------------------------------------------------------------------------- write
 
-    if v.mmio_write then
+    if v.mmio_write='1' then
       case i.ha.ad is
         -- debug data
         when MMIO_REG_ADDRESS =>
@@ -62,16 +62,16 @@ begin
 ----------------------------------------------------------------------------------------------------------------------- read
 
     -- afu descriptor double word
-    if r.cfg_read and r.mmio_dw then
+    if (r.cfg_read and r.mmio_dw) = '1' then
       v.mmio_rdata      := v.cfg_data;
     -- afu descriptor word
-    elsif r.cfg_read and i.ha.ad(0) then
+    elsif (r.cfg_read and i.ha.ad(0)) = '1' then
       v.mmio_rdata      := v.cfg_data(PSL_WORD_WIDTH - 1 downto 0) & v.cfg_data(PSL_WORD_WIDTH - 1 downto 0);
     -- afu descriptor other word
-    elsif r.cfg_read then
+    elsif (r.cfg_read = '1') then
       v.mmio_rdata      := v.cfg_data(PSL_WORD_WIDTH - 1 downto 0) & v.cfg_data(PSL_WORD_WIDTH - 1 downto 0);
     -- read register double word
-    elsif r.mmio_read and r.mmio_dw then
+    elsif (r.mmio_read and r.mmio_dw) = '1' then
       case i.ha.ad is
         -- debug data
         when MMIO_REG_ADDRESS =>
@@ -98,7 +98,7 @@ begin
   reg : process(i.cr)
   begin
     if rising_edge(i.cr.clk) then
-      if i.cr.rst then
+      if i.cr.rst='1' then
         mmio_reset(r);
       else
         r <= q;
diff --git a/accelerator/rtl/ram.vhd b/accelerator/rtl/ram.vhd
index a0e1d01..4121ee3 100644
--- a/accelerator/rtl/ram.vhd
+++ b/accelerator/rtl/ram.vhd
@@ -25,12 +25,12 @@ architecture logic of ram is
 begin
 
   -- read new data
-  w_r : if wr generate
+  w_r : if wr = '1' generate
     process(clk)
       variable mem                : mem_type := (others => (others => '0'));
     begin
       if rising_edge(clk) then
-        if put then
+        if put = '1' then
           mem(idx(address))       := data_in;
         end if;
         data_out                  <= mem(idx(address));
@@ -39,13 +39,13 @@ begin
   end generate w_r;
 
   -- read old data
-  r_w : if not wr generate
+  r_w : if not (wr = '1') generate
     process(clk)
       variable mem                : mem_type := (others => (others => '0'));
     begin
       if rising_edge(clk) then
         data_out                  <= mem(idx(address));
-        if put then
+        if put = '1' then
           mem(idx(address))       := data_in;
         end if;
       end if;
@@ -83,12 +83,12 @@ architecture logic of ram_unsigned is
 begin
 
   -- read new data
-  w_r : if wr generate
+  w_r : if wr = '1' generate
     process(clk)
       variable mem                : mem_type := (others => (others => '0'));
     begin
       if rising_edge(clk) then
-        if put then
+        if put = '1' then
           mem(idx(address))       := data_in;
         end if;
         data_out                  <= mem(idx(address));
@@ -97,13 +97,13 @@ begin
   end generate w_r;
 
   -- read old data
-  r_w : if not wr generate
+  r_w : if not (wr = '1') generate
     process(clk)
       variable mem                : mem_type := (others => (others => '0'));
     begin
       if rising_edge(clk) then
         data_out                  <= mem(idx(address));
-        if put then
+        if put = '1' then
           mem(idx(address))       := data_in;
         end if;
       end if;
@@ -143,11 +143,11 @@ architecture logic of ram_dual is
 begin
 
   -- read new data
-  w_r : if wr generate
+  w_r : if wr = '1' generate
     process(clk)
     begin
       if rising_edge(clk) then
-        if put then
+        if put  = '1' then
           mem(idx(write_address)) := data_in;
         end if;
         data_out                  <= mem(idx(read_address));
@@ -156,12 +156,12 @@ begin
   end generate w_r;
 
   -- read old data
-  r_w : if not wr generate
+  r_w : if not (wr = '1') generate
     process(clk)
     begin
       if rising_edge(clk) then
         data_out                  <= mem(idx(read_address));
-        if put then
+        if put = '1' then
           mem(idx(write_address)) := data_in;
         end if;
       end if;
@@ -201,11 +201,11 @@ architecture logic of ram_dual_unsigned is
 begin
 
   -- read new data
-  w_r : if wr generate
+  w_r : if wr = '1' generate
     process(clk)
     begin
       if rising_edge(clk) then
-        if put then
+        if put = '1' then
           mem(idx(write_address)) := data_in;
         end if;
         data_out                  <= mem(idx(read_address));
@@ -214,12 +214,12 @@ begin
   end generate w_r;
 
   -- read old data
-  r_w : if not wr generate
+  r_w : if not (wr = '1') generate
     process(clk)
     begin
       if rising_edge(clk) then
         data_out                  <= mem(idx(read_address));
-        if put then
+        if (put = '1') then
           mem(idx(write_address)) := data_in;
         end if;
       end if;
